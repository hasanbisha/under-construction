{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["formatTime","milliseconds","seconds","Math","floor","minutes","hours","getSplitedTime","days","formattedDays","formattedHours","formattedMinutes","formattedSeconds","StartingMessage","id","LeftTime","intervalId","useRef","dueDate","useMemo","Date","getTime","useState","currentTime","setCurrentTime","timeLeft","useEffect","current","window","setInterval","clearInterval","EmailSubscription","onSubmit","e","preventDefault","console","log","type","placeholder","required","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAyBA,SAASA,EAAWC,GAAsC,IAAD,EAvBzD,SAAwBA,GAQpB,IAAIC,EAAUC,KAAKC,MAAOH,EAAe,IAAQ,IAC7CI,EAAUF,KAAKC,MAAOH,EAAY,IAAkB,IACpDK,EAAQH,KAAKC,MAAOH,EAAY,KAAuB,IAG3D,MAAO,CAFIE,KAAKC,MAAOH,EAAY,MAA4B,GAEjDK,EAAOD,EAASH,GAWUK,CAAeN,GADF,mBAC9CO,EAD8C,KACxCF,EADwC,KACjCD,EADiC,KACxBH,EADwB,KAmCrD,MAAO,CACHO,cA3BAD,EAAO,GACM,YAAQA,GACdA,EAAO,IACD,WAAOA,GAEP,UAAMA,GAuBnBE,eApBAJ,EAAQ,GACM,WAAOA,GAEP,UAAMA,GAkBpBK,iBAfAN,EAAU,GACM,WAAOA,GAEP,UAAMA,GAatBO,iBAVAV,EAAU,GACM,WAAOA,GAEP,UAAMA,IAW9B,SAASW,IACL,OACI,sBAAKC,GAAG,mBAAR,UACI,4CACA,uDAKZ,SAASC,IACL,IAAIC,EAAaC,iBAAoB,MAC/BC,EAAUC,mBAAQ,kBAAM,IAAIC,KAAK,aAAaC,YAAW,IAF/C,EAGsBC,oBAAiB,IAAIF,MAAOC,WAHlD,mBAGTE,EAHS,KAGIC,EAHJ,KAIVC,EAAWN,mBAAQ,kBAAMD,EAAUK,IAAa,CAACL,EAASK,IAJhD,EAUZJ,mBAAQ,kBAAMnB,EAAWyB,KAAW,CAACA,IAJrChB,EANY,EAMZA,cACAC,EAPY,EAOZA,eACAC,EARY,EAQZA,iBACAC,EATY,EASZA,iBAgBJ,OAbAc,qBAAU,WAKN,OAJAV,EAAWW,QAAUC,OAAOC,aAAY,WACpCL,GAAe,IAAIJ,MAAOC,aAC3B,KAEI,WACuB,kBAAfL,GACPc,cAAcd,GAElBA,EAAWW,QAAU,QAE1B,CAACH,IAGA,sBAAKV,GAAG,YAAR,UACI,gCACI,6BAAKL,IACL,wCAGJ,gCACI,6BAAKC,IACL,yCAGJ,gCACI,6BAAKC,IACL,2CAGJ,gCACI,6BAAKC,IACL,8CAMhB,SAASmB,IAML,OACI,sBAAKjB,GAAG,qBAAR,UACI,uBAAMkB,SAPd,SAAkBC,GACdA,EAAEC,iBACFC,QAAQC,IAAI,kBAKR,UACI,uBACIC,KAAK,QACLC,YAAY,qBACZC,UAAQ,IAGZ,wBAAQF,KAAK,SAAb,0BAGJ,sBAAKvB,GAAG,mBAAR,6BAEI,uBAFJ,2BAqBG0B,MAZf,WACE,OACE,sBAAK1B,GAAG,0BAAR,UACI,cAACD,EAAD,IAEA,cAACE,EAAD,IAEA,cAACgB,EAAD,QCnJOU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0bd09543.chunk.js","sourcesContent":["import { useState, useRef, useEffect, useMemo, SyntheticEvent } from 'react';\n\nfunction getSplitedTime(milliseconds: number): number[] {\n    /*\n    let seconds = Math.floor(milliseconds / 1000);\n    let minutes = Math.floor(milliseconds / (1000 * 60));\n    let hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    let days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n    */\n\n    let seconds = Math.floor((milliseconds / 1000) % 60);\n    let minutes = Math.floor((milliseconds / (1000 * 60)) % 60);\n    let hours = Math.floor((milliseconds / (1000 * 60 * 60)) % 24);\n    let days = Math.floor((milliseconds / (1000 * 60 * 60 * 24)) % 7);\n\n    return [days, hours, minutes, seconds];\n}\n\ntype FormattedTime = {\n    formattedDays: string;\n    formattedHours: string;\n    formattedMinutes: string;\n    formattedSeconds: string;\n}\n\nfunction formatTime(milliseconds: number): FormattedTime {\n    const [days, hours, minutes, seconds] = getSplitedTime(milliseconds);\n\n    let formattedDays = '000';\n    let formattedHours = '00';\n    let formattedMinutes = '00';\n    let formattedSeconds = '00';\n\n    // ``;\n    if (days < 10) {\n        formattedDays = `00${days}`;\n    } else if (days < 100) {\n        formattedDays = `0${days}`;\n    } else {\n        formattedDays = `${days}`;\n    }\n\n    if (hours < 10) {\n        formattedHours = `0${hours}`;\n    } else {\n        formattedHours = `${hours}`;\n    }\n\n    if (minutes < 10) {\n        formattedMinutes = `0${minutes}`;\n    } else {\n        formattedMinutes = `${minutes}`;\n    }\n\n    if (seconds < 10) {\n        formattedSeconds = `0${seconds}`;\n    } else {\n        formattedSeconds = `${seconds}`;\n    }\n\n    return {\n        formattedDays,\n        formattedHours,\n        formattedMinutes,\n        formattedSeconds,\n    };\n}\n\nfunction StartingMessage() {\n    return (\n        <div id=\"starting-message\">\n            <strong>we are</strong>\n            <h3>Under Construction</h3>\n        </div>\n    );\n}\n\nfunction LeftTime() {\n    let intervalId = useRef<number|null>(null);\n    const dueDate = useMemo(() => new Date(\"2021-5-20\").getTime(), []);\n    const [currentTime, setCurrentTime] = useState<number>(new Date().getTime());\n    const timeLeft = useMemo(() => dueDate - currentTime, [dueDate, currentTime]);\n    const {\n        formattedDays,\n        formattedHours,\n        formattedMinutes,\n        formattedSeconds,\n    } = useMemo(() => formatTime(timeLeft), [timeLeft]);\n\n    useEffect(() => {\n        intervalId.current = window.setInterval(() => {\n            setCurrentTime(new Date().getTime());\n        }, 1000);\n\n        return () => {\n            if (typeof intervalId === \"number\") {\n                clearInterval(intervalId);\n            }\n            intervalId.current = null;\n        }\n    }, [setCurrentTime]);\n\n    return (\n        <div id=\"left-time\">\n            <div>\n                <h1>{formattedDays}</h1>\n                <p>days</p>\n            </div>\n\n            <div>\n                <h1>{formattedHours}</h1>\n                <p>hours</p>\n            </div>\n\n            <div>\n                <h1>{formattedMinutes}</h1>\n                <p>minutes</p>\n            </div>\n\n            <div>\n                <h1>{formattedSeconds}</h1>\n                <p>seconds</p>\n            </div>\n        </div>\n    );\n}\n\nfunction EmailSubscription() {\n    function onSubmit(e: SyntheticEvent) {\n        e.preventDefault();\n        console.log(\"not ready yet\");\n    }\n\n    return (\n        <div id=\"email-subscription\">\n            <form onSubmit={onSubmit}>\n                <input\n                    type=\"email\"\n                    placeholder=\"Your email address\"\n                    required\n                />\n\n                <button type=\"submit\">Subscribe</button>\n            </form>\n\n            <div id=\"floating-message\">\n                We'll notify you\n                <br />\n                as soon as we open\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n  return (\n    <div id=\"under-construction-page\">\n        <StartingMessage />\n\n        <LeftTime />\n\n        <EmailSubscription />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './style/main.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}